{"version":3,"file":"WebSocketTransport.js","sourceRoot":"","sources":["../../src/WebSocketTransport.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail } from \"./Utils\";\r\n\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly logger: ILogger;\r\n    private readonly accessTokenFactory: () => string | Promise<string>;\r\n    private readonly logMessageContent: boolean;\r\n    private webSocket: WebSocket;\r\n\r\n    constructor(accessTokenFactory: () => string | Promise<string>, logger: ILogger, logMessageContent: boolean) {\r\n        this.logger = logger;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logMessageContent = logMessageContent;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        if (typeof (WebSocket) === \"undefined\") {\r\n            throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n        }\r\n\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting\");\r\n\r\n        const token = await this.accessTokenFactory();\r\n        if (token) {\r\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            const webSocket = new WebSocket(url);\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            webSocket.onopen = (event: Event) => {\r\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}`);\r\n                this.webSocket = webSocket;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: ErrorEvent) => {\r\n                reject(event.error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this.logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    this.onreceive(message.data);\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // webSocket will be null if the transport did not start successfully\r\n                this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n                if (this.onclose) {\r\n                    if (event.wasClean === false || event.code !== 1000) {\r\n                        this.onclose(new Error(`Websocket closed with status code: ${event.code} (${event.reason})`));\r\n                    } else {\r\n                        this.onclose();\r\n                    }\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.webSocket && this.webSocket.readyState === WebSocket.OPEN) {\r\n            this.logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this.logMessageContent)}.`);\r\n            this.webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.webSocket) {\r\n            this.webSocket.close();\r\n            this.webSocket = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onreceive: (data: string | ArrayBuffer) => void;\r\n    public onclose: (error?: Error) => void;\r\n}\r\n"]}