{"version":3,"file":"ServerSentEventsTransport.js","sourceRoot":"","sources":["../../src/ServerSentEventsTransport.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: () => string | Promise<string>;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private eventSource: EventSource;\r\n    private url: string;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: () => string | Promise<string>, logger: ILogger, logMessageContent: boolean) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logger = logger;\r\n        this.logMessageContent = logMessageContent;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        if (typeof (EventSource) === \"undefined\") {\r\n            throw new Error(\"'EventSource' is not supported in your environment.\");\r\n        }\r\n\r\n        this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting\");\r\n\r\n        const token = await this.accessTokenFactory();\r\n        if (token) {\r\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n        }\r\n\r\n        this.url = url;\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n            }\r\n\r\n            const eventSource = new EventSource(url, { withCredentials: true });\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this.logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            if (this.onclose) {\r\n                                this.onclose(error);\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                eventSource.onerror = (e: any) => {\r\n                    const error = new Error(e.message || \"Error occurred\");\r\n                    if (opened) {\r\n                        this.close(error);\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this.logger.log(LogLevel.Information, `SSE connected to ${this.url}`);\r\n                    this.eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                return Promise.reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"SSE\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(e?: Error) {\r\n        if (this.eventSource) {\r\n            this.eventSource.close();\r\n            this.eventSource = null;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onreceive: (data: string | ArrayBuffer) => void;\r\n    public onclose: (error?: Error) => void;\r\n}\r\n"]}