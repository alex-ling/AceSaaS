{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../../src/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\n\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let length: string = null;\r\n    if (data instanceof ArrayBuffer) {\r\n        length = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            length += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        length = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            length += `. Content: '${data}'.`;\r\n        }\r\n    }\r\n    return length;\r\n}\r\n\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: () => string | Promise<string>, content: string | ArrayBuffer, logMessageContent: boolean): Promise<void> {\r\n    let headers;\r\n    const token = await accessTokenFactory();\r\n    if (token) {\r\n        headers = {\r\n            [\"Authorization\"]: `Bearer ${token}`,\r\n        };\r\n    }\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, logMessageContent)}.`);\r\n\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\nexport function createLogger(logger?: ILogger | LogLevel) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    public observers: Array<IStreamSubscriber<T>>;\r\n    public cancelCallback: () => Promise<void>;\r\n\r\n    constructor(cancelCallback: () => Promise<void>) {\r\n        this.observers = [];\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private subject: Subject<T>;\r\n    private observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this.subject = subject;\r\n        this.observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this.subject.observers.indexOf(this.observer);\r\n        if (index > -1) {\r\n            this.subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this.subject.observers.length === 0) {\r\n            this.subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly minimumLogLevel: LogLevel;\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this.minimumLogLevel = minimumLogLevel;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this.minimumLogLevel) {\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    console.error(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    console.warn(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    console.info(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    console.log(`${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}